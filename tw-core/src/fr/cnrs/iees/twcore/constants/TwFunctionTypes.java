/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *                    *** 3Worlds - A software for the simulation of ecosystems ***
 *                    *                                                           *
 *                    *        by:  Jacques Gignoux - jacques.gignoux@upmc.fr     *
 *                    *             Ian D. Davies   - ian.davies@anu.edu.au       *
 *                    *             Shayne R. Flint - shayne.flint@anu.edu.au     *
 *                    *                                                           *
 *                    *         http:// ???                                       *
 *                    *                                                           *
 *                    *************************************************************
 * CAUTION: generated code - do not modify
 * generated by CentralResourceGenerator on Wed Apr 21 11:03:36 CEST 2021
*/
package fr.cnrs.iees.twcore.constants;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import fr.cnrs.iees.io.parsing.ValidPropertyTypes;

import java.util.List;
import java.util.EnumSet;
import fr.cnrs.iees.twcore.generators.process.TwFunctionArguments;
import static fr.cnrs.iees.twcore.generators.process.TwFunctionArguments.*; 
import java.util.EnumMap; 
import java.util.Map;



public enum TwFunctionTypes {

// ChangeState: change the state, i.e. the values of the descriptors of a system component
	ChangeState ("change the state, i.e. the values of the descriptors of a system component",
		"changeState",
		"void",
		""),

// ChangeCategoryDecision: change category of a system component according to life cycle (has no effect if no life cycle is specified)
	ChangeCategoryDecision ("change category of a system component according to life cycle (has no effect if no life cycle is specified)",
		"changeCategory",
		"String",
		"the new category of the recruited <em>focal</em> system component"),

// CreateOtherDecision: create another system component, of the same categories if no life cycle is present, otherwise as specified by the life cycle
	CreateOtherDecision ("create another system component, of the same categories if no life cycle is present, otherwise as specified by the life cycle",
		"nNew",
		"double",
		"the number of new system components to create. The integral part is used as a number of new components, the decimal part as a probability to create an extra component."),

// DeleteDecision: delete self
	DeleteDecision ("delete self",
		"delete",
		"boolean",
		"true if the current <em>focal</em> system component is to be deleted."),

// ChangeOtherState: _focal_ changes the state of _other_
	ChangeOtherState ("_focal_ changes the state of _other_",
		"changeOtherState",
		"void",
		""),

// RelateToDecision: _focal_ establishes a new relation to _other_
	RelateToDecision ("_focal_ establishes a new relation to _other_",
		"relateTo",
		"boolean",
		"true if a new relation is to be set between <em>focal</em> and  <em>other</em>"),

// MaintainRelationDecision: decision to maintain or remove an existing relation
	MaintainRelationDecision ("decision to maintain or remove an existing relation",
		"maintainRelation",
		"boolean",
		"true if the existing relation between <em>focal</em> and <em>other</em> is to be kept"),

// ChangeRelationState: change the state of a relation, i.e. possibly both the state of _focal_ and _other_ at the same time
	ChangeRelationState ("change the state of a relation, i.e. possibly both the state of _focal_ and _other_ at the same time",
		"changeRelationState",
		"void",
		""),

// SetInitialState: sets the initial state of a newly created SystemComponent
	SetInitialState ("sets the initial state of a newly created SystemComponent",
		"setInitialState",
		"void",
		""),

// SetOtherInitialState: sets the initial state of a newly created SystemComponent given a parent component
	SetOtherInitialState ("sets the initial state of a newly created SystemComponent given a parent component",
		"setOtherInitialState",
		"void",
		"");
	
	private final String description;
	private final String method;
	private final String returnType;
	private final String returnJavaDoc;

	private TwFunctionTypes(String description, String method, String returnType, String returnJavaDoc) {
		this.description = description;
		this.method = method;
		this.returnType = returnType;
		this.returnJavaDoc = returnJavaDoc;
	}

	public String description() {
		return description;
	}

	public String method() {
		return method;
	}

	public String returnType() {
		return returnType;
	}

	public String returnJavaDoc() {
		return returnJavaDoc;
	}

	public static String[] toStrings() {
		String[] result = new String[TwFunctionTypes.values().length];
		for (TwFunctionTypes s: TwFunctionTypes.values())
			result[s.ordinal()] = s.name();
		Arrays.sort(result);
		return result;
	}

	public static Set<String> keySet() {
		Set<String> result = new HashSet<String>();
		for (TwFunctionTypes e: TwFunctionTypes.values())
			result.add(e.toString());
		return result;
	}

	public static TwFunctionTypes defaultValue() {
		return ChangeState;
	}

	static {
		ValidPropertyTypes.recordPropertyType(TwFunctionTypes.class.getSimpleName(), 
		TwFunctionTypes.class.getName(),defaultValue());
	}

    /**
     * <p>Selection of a TwFunctionType in the FunctionNode of the 3Worlds configuration graph
     * triggers the generation of code that can be modified by the user to suit their particular
     * model needs. Code generation consists in (i) one user-editable file hereafter called
     * 'Model java file', and (ii) one non-editable file per FunctionNode hereafter called 
     * 'function java file' that serves as an interface between the model java file and the
     * 3Wolrds code.</p>
     * 
     * <p>This method returns the possible read-only arguments to user-defined functions.</p>     
     * 
     * <p>These will cause the generation by ModelGenerator of:</p>
     * <ul>
     * <li>a comment on the argument of the type "[field/table description] for [element type]".</li>
     * <Li>a read-only argument in the function header list (of the Model java file) for each
     * field/table of the 2Worlds data structure</li>
     * <li>a conversion from the 3Worlds data structure to the argument in the function file when
     * calling the function in the Model java file.</li>
     * </ul>
     * 
     * @return
     */
    public Set<TwFunctionArguments> readOnlyArguments() {
        switch (this) {
        case SetInitialState:
            return EnumSet.of(arena,lifeCycle,group,focal,space);
        case ChangeState:
        case ChangeCategoryDecision:
        case CreateOtherDecision:
        case DeleteDecision:
            return EnumSet.of(t,dt,arena,lifeCycle,group,focal,space);
        case SetOtherInitialState:
        case ChangeOtherState:
        case MaintainRelationDecision:
        case RelateToDecision:
        case ChangeRelationState:
            return EnumSet.of(t,dt,arena,lifeCycle,group,focal,otherLifeCycle,otherGroup,other,space);
        default:
            return EnumSet.noneOf(TwFunctionArguments.class);
        }
    }

    /**
     * Arguments to call the &lt;UserModel&gt; interface from the TwFunction descendant.
     * eg in MyFunction.changeState(...): UserModel.userfunk(...)
     * @return
     */
    public Set<TwFunctionArguments> localArguments() {
        switch (this) {
        case ChangeCategoryDecision:
        return EnumSet.of(random,decider,selector,recruit);
        case DeleteDecision:
        case CreateOtherDecision:
        case MaintainRelationDecision:
        case RelateToDecision:
            return EnumSet.of(random,decider);
        case ChangeState:
        case SetInitialState:
        case ChangeOtherState:
        case ChangeRelationState:
        case SetOtherInitialState:
            return EnumSet.of(random);
        default:
            return EnumSet.noneOf(TwFunctionArguments.class);
        }
    }
    
    private static Map<TwFunctionTypes,Map<TwFunctionArguments,List<String>>> innerVarMap;
    
    static {
        innerVarMap = new EnumMap<>(TwFunctionTypes.class);
        for (TwFunctionTypes ft:TwFunctionTypes.values()) {
            Map<TwFunctionArguments,List<String>> result = new EnumMap<>(TwFunctionArguments.class);
            innerVarMap.put(ft,result);
            switch (ft) {
                case ChangeOtherState:
                    result.put(arena, List.of("decorators"));
                    result.put(otherLifeCycle,List.of("decorators"));
                    result.put(otherGroup,List.of("decorators"));
                    result.put(other,List.of("drivers","decorators"));
                    result.put(limits,List.of());
                break;
                case ChangeRelationState:
                    result.put(arena, List.of("decorators"));
                    result.put(lifeCycle,List.of("decorators"));
                    result.put(otherLifeCycle,List.of("decorators"));
                    result.put(group,List.of("decorators"));
                    result.put(otherGroup,List.of("decorators"));
                    result.put(focal,List.of("drivers","decorators"));
                    result.put(other,List.of("drivers","decorators"));
                    result.put(limits,List.of());
                break;
                case ChangeState:
                    result.put(arena, List.of("decorators"));
                    result.put(lifeCycle,List.of("decorators"));
                    result.put(group,List.of("decorators"));
                    result.put(focal,List.of("drivers","decorators"));
                    result.put(limits,List.of());
                break;
                case SetInitialState:
                    // NB: NO autoVar because no time model at this stage
                    result.put(focal,List.of("drivers","constants"));
                break;
                case SetOtherInitialState:
                    result.put(other,List.of("drivers","constants"));
                    result.put(limits,List.of());
                break;
                default:
                    result.put(limits,List.of());
                break;
            }   
        }
    }
       
    /**
     * <p>Selection of a TwFunctionType in the FunctionNode of the 3Worlds configuration graph
     * triggers the generation of code that can be modified by the user to suit their particular
     * model needs. Code generation consists in (i) one user-editable file hereafter called
     * 'Model java file', and (ii) one non-editable file per FunctionNode hereafter called 
     * 'function java file' that serves as an interface between the model java file and the
     * 3Wolrds code.</p>
     * 
     * <p>This method returns the possible writeable arguments to user-defined functions.</p>
     * 
     * <p>These will cause the generation by ModelGenerator of:</p>
     * <ul>
     * <li>a comment on the argument of the type "next/new [variable group] for [element type]".
     * Variable groups are: constants, decorators, autoVar, drivers.</li>
     * <li>a writeable argument in the function header list (of the Model java file)</li>
     * <li>an inner class in the function jave file</li>
     * <li>an instance of this inner class in the function java file</li>
     * <li>a copy-back statement of this instance after the call to the Model java file function 
     * matching this one</li>
     * </ul>
     * 
     * @return a map of the writeable arguments required by this TwFunctionType
     */
    public Map<TwFunctionArguments,List<String>> innerVars() {
        return innerVarMap.get(this);
    }

}

