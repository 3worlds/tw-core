/*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*                    *** 3Worlds - A software for the simulation of ecosystems ***
*                    *                                                           *
*                    *        by:  Jacques Gignoux - jacques.gignoux@upmc.fr     *
*                    *             Ian D. Davies   - ian.davies@anu.edu.au       *
*                    *             Shayne R. Flint - shayne.flint@anu.edu.au     *
*                    *                                                           *
*                    *         http:// ???                                       *
*                    *                                                           *
*                    *************************************************************
* CAUTION: generated code - do not modify
* generated by CentralResourceGenerator on Tue Jul 09 15:33:00 CEST 2019
*/
package fr.cnrs.iees.twcore.constants;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import fr.cnrs.iees.io.parsing.ValidPropertyTypes;

public enum TwFunctionTypes {

// ChangeState: change state, ie internal variables, of a system component
	ChangeState ("changeState", "t,dt,focal", "double,double,SystemComponent", "void"),

// ChangeCategoryDecision: change category of a system component according to life cycle
	ChangeCategoryDecision ("changeCategory", "t,dt,focal", "double,double,SystemComponent", "String"),

// CreateOtherDecision: create another system component according to life cycle
	CreateOtherDecision ("nNew", "t,dt,focal,newType", "double,double,SystemComponent,String", "double"),

// DeleteDecision: delete self
	DeleteDecision ("delete", "t,dt,focal", "double,double,SystemComponent", "boolean"),

// Aggregator: compute statistics
	Aggregator ("aggregate", "item,prefix", "ReadOnlyPropertyList,String...", "void"),

// ChangeOtherState: _focal_ changes state of _other_
	ChangeOtherState ("changeOtherState", "t,dt,focal,other", "double,double,SystemComponent,SystemComponent", "void"),

// ChangeOtherCategoryDecision: _focal_ changes category of _other_
	ChangeOtherCategoryDecision ("changeCategory", "t,dt,focal,other", "double,double,SystemComponent,SystemComponent", "String"),

// DeleteOtherDecision: _focal_ deletes _other_
	DeleteOtherDecision ("delete", "t,dt,focal,other", "double,double,SystemComponent,SystemComponent", "boolean"),

// RelateToDecision: _focal_ establishes a new relation to _other_
	RelateToDecision ("relateTo", "t,dt,focal,other", "double,double,SystemComponent,SystemComponent", "boolean"),

// MaintainRelationDecision: decision to maintain or remove an existing relation
	MaintainRelationDecision ("maintainRelation", "t,dt,relation,start,end", "double,double,Edge,SystemComponent,SystemComponent", "boolean"),

// ChangeRelationState: change state of a relation
	ChangeRelationState ("changeRelationState", "t,dt,focal,other,relation", "double,double,SystemComponent,SystemComponent,Edge", "void");
	
	private final String method;
	private final String argumentNames;
	private final String argumentTypes;
	private final String returnType;

	private TwFunctionTypes(String method, String argumentNames, String argumentTypes, String returnType) {
		this.method = method;
		this.argumentNames = argumentNames;
		this.argumentTypes = argumentTypes;
		this.returnType = returnType;
	}

	public String method() {
		return method;
	}

	public String argumentNames() {
		return argumentNames;
	}

	public String argumentTypes() {
		return argumentTypes;
	}

	public String returnType() {
		return returnType;
	}

	public static String[] toStrings() {
		String[] result = new String[TwFunctionTypes.values().length];
		for (TwFunctionTypes s: TwFunctionTypes.values())
			result[s.ordinal()] = s.name();
		Arrays.sort(result);
		return result;
	}

	public static Set<String> keySet() {
		Set<String> result = new HashSet<String>();
		for (TwFunctionTypes e: TwFunctionTypes.values())
			result.add(e.toString());
		return result;
	}

	public static TwFunctionTypes defaultValue() {
		return ChangeState;
	}

	static {
		ValidPropertyTypes.recordPropertyType(TwFunctionTypes.class.getSimpleName(), 
		TwFunctionTypes.class.getName(),defaultValue());
	}

}

