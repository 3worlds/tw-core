tree
	scope =            String("3W-archetype")
	archetype =        String("au.edu.anu.aot.archetype.ArchetypeRootSpec")
	hasNode =          String("au.edu.anu.aot.archetype.NodeSpec")
	hasProperty =      String("au.edu.anu.aot.archetype.PropertySpec")
	hasEdge =          String("au.edu.anu.aot.archetype.EdgeSpec")
	mustSatisfyQuery = String("au.edu.anu.aot.archetype.ConstraintSpec")

archetype 3wSA-GraphWidget1

	hasNode GraphWidget1Spec
		isOfClass = String("widget")
		hasParent = StringTable(([4]"top:","bottom:","tab:","container:"))
		multiplicity = IntegerRange("0..*")
		mustSatisfyQuery GraphWidget1SenderInRangeQuery
			className = String("au.edu.anu.twcore.archetype.tw.SenderInRangeQuery")
		hasProperty GraphWidget1SenderProperty
			hasName = String("simId")
			type = String("Integer")
			multiplicity = IntegerRange("0..1")
		mustSatisfyQuery GraphWidget1ParentClassQuery
			className = String("au.edu.anu.twcore.archetype.tw.ParentLabelQuery")
			parentLabels = StringTable(([2]"tab","container"))
//		hasEdge GraphWidget1ToSystemEdgeSpec
//			isOfClass = String("sampleArena")
//			toNode = String("system:")
//			multiplicity = IntegerRange("1..1")
		hasEdge GraphWidget1DataTrackerEdgeSpec
			isOfClass = String("trackSeries")
			toNode = String("dataTracker:")
			multiplicity = IntegerRange("1..1")
// we need NodeHasPropertyValueQuery subClass = type of class allowed
