tree

hasNode dynamicsSpec
	isOfClass = String("dynamics")
	hasParent =  au.edu.anu.rscs.aot.collections.tables.StringTable(([1]"system:"))
	multiplicity = IntegerRange("1..1")

hasNode initialisationSpec
	isOfClass = String("initialiser")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("0..1")
	
hasNode timeLineSpec
	isOfClass = String("timeLine")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("1..1")
	hasProperty scalePropertySpec
		hasName = String("scale")
		type =  String("TimeScaleType") 
		multiplicity = IntegerRange("1..1") 
	hasProperty shortestTimeUnitPropertySpec
		hasName = String("shortestTimeUnit")
		type =  String("TimeUnits") 
		multiplicity = IntegerRange("1..1") 
	hasProperty longestTimeUnitPropertySpec
		hasName = String("longestTimeUnit")
		type =  String("TimeUnits") 
		multiplicity = IntegerRange("1..1") 
	mustSatisfyQuery shortestTimeUnitTimeUnitValidityQuery
		className = String("au.edu.anu.twcore.archetype.tw.TimeUnitValidityQuery")
		values = StringTable(([2]"shortestTimeUnit","scale"))
	mustSatisfyQuery longestTimeUnitTimeUnitValidityQuery
		className = String("au.edu.anu.twcore.archetype.tw.TimeUnitValidityQuery")
		values = StringTable(([2]"longestTimeUnit","scale"))
	mustSatisfyQuery TimeIntervalValidityQuery
		className = String("au.edu.anu.twcore.archetype.tw.TimeIntervalValidityQuery")
		values = StringTable(([3]shortestTimeUnit,"longestTimeUnit","scale"))

hasNode timeModelSpec
	isOfClass = String("timeModel")
	hasParent = StringTable(([1]"timeLine:"))
	multiplicity = IntegerRange("1..*")
	hasProperty timeUnitPropertySpec
		hasName = String("timeUnit")
		type =  String("TimeUnits")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery timeUnitTimeUnitValidityQuery
		className = String("au.edu.anu.twcore.archetype.tw.TimeUnitValidityQuery")
		values = StringTable(([2]"timeUnit","scale"))
	hasProperty 
		hasName = String("nTimeUnits")
		type = String("Integer")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery nTimeUnitsIsInRangeQuery
			className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
			interval = IntTable(([2]1,2147483647))      // Integer.MAX_VALUE = 2^31-1 = 2147483647
	hasProperty timeModelSubclassPropertySpec
		hasName = String("subclass")
		type = String("String")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery validTimeModelSubclassSpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			// TODO: this may become a limit: strings lists cannot be spread over more than one line
			values = StringTable(([3]"au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer","au.edu.anu.twcore.ecosystem.runtime.timer.EventTimer","au.edu.anu.twcore.ecosystem.runtime.timer.ScenarioTimer"))
	mustSatisfyQuery CheckSubArchetypeQueryClockTimeModel
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.timer.ClockTimer","3wSA-ClockTimer.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryEventTimeModel
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.timer.EventTimer","3wSA-EventTimer.ugt"))

hasNode processSpec
	isOfClass = String("process")
	hasParent = StringTable(([1]"timeModel:"))
	multiplicity = IntegerRange("1..*")
	mustSatisfyQuery processHasFunctionOrDataTrackerChildQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		labels = StringTable(([2]"function","dataTracker"))
	hasEdge appliesToCategorySpec
		isOfClass = String("appliesTo")
		toNode = String("category")
		multiplicity = IntegerRange("0..*")
	hasEdge appliesToRelationSpec
		isOfClass = String("appliesTo")
		toNode = String("relation")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery processToRelationOrCategorySpec
		className = String("au.edu.anu.twcore.archetype.tw.OutNodeXorQuery")
		nodeLabel1 = String("category")
		nodeLabel2 = String("relationType")
	hasEdge dependsOnSpec
		isOfClass = String("dependsOn")
		toNode = String("process")
		multiplicity = IntegerRange("0..*")

hasNode functionSpec
	isOfClass = String("function")
	hasParent = StringTable(([2]"process:","process:/function:"))
	multiplicity = IntegerRange("0..*")
	mustSatisfyQuery functionNameWithUppercaseQuery
		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")
	hasProperty functionTypeSpec
		hasName = String("type")
		type = String("TwFunctionTypes")
		multiplicity = IntegerRange("1..1")
	hasProperty userFunctionSpec
		hasName = String("userClassName")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		
// TODO: dataTracker spec		

hasNode lifeCycleSpec
	isOfClass = String("lifeCycle")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("0..*")
	hasEdge lifeCycleToCategorySetSpec
		isOfClass = String("appliesTo")
		toNode = String("categorySet")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery lifeCycleHasRecruitOrProduceChildQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		labels = StringTable(([2]"recruit","produce"))

hasNode recruitSpec
	isOfClass = String("recruit")
	hasParent = StringTable(([1]"lifeCycle:"))
	multiplicity = IntegerRange("0..*")
	hasEdge recruitProcessSpec
		isOfClass = String("effectedBy")
		toNode = String("process")
		multiplicity = IntegerRange("1..1")
	// TODO: make sure the process applies to the proper categories and has a function of the proper type...
		
hasNode produceSpec
	isOfClass = String("produce")
	hasParent = StringTable(([1]"lifeCycle:"))
	multiplicity = IntegerRange("0..*")
	hasEdge productionProcessSpec
		isOfClass = String("effectedBy")
		toNode = String("process")
		multiplicity = IntegerRange("1..1")
	// TODO: make sure the process applies to the proper categories and has a function of the proper type...

hasNode stoppingConditionSpec
	isOfClass = String("stoppingCondition")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("0..*")
	hasProperty stoppingConditionSubclassPropertySpec
		hasName = String("subclass")
		type = String("String")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery validStoppingConditionSubClassSpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			values = StringTable(([6]"au.edu.anu.twcore.ecosystem.runtime.stop.SimpleStoppingCondition","au.edu.anu.twcore.ecosystem.runtime.stop.ValueStoppingCondition","au.edu.anu.twcore.ecosystem.runtime.stop.InRangeStoppingCondition","au.edu.anu.twcore.ecosystem.runtime.stop.OutRangeStoppingCondition","au.edu.anu.twcore.ecosystem.runtime.stop.MultipleOrStoppingCondition","au.edu.anu.twcore.ecosystem.runtime.stop.MultipleAndStoppingCondition"))
	mustSatisfyQuery CheckSubArchetypeQuerySimpleStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.SimpleStoppingCondition","3wSA-SimpleStoppingCondition.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryValueStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.ValueStoppingCondition","3wSA-ValueStoppingCondition.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryInRangeStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.InRangeStoppingCondition","3wSA-RangeStoppingCondition.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryOutRangeStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.OutRangeStoppingCondition","3wSA-RangeStoppingCondition.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryMultipleOrStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.MultipleOrStoppingCondition","3wSA-MultipleStoppingCondition.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryMultipleAndStop
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass","au.edu.anu.twcore.ecosystem.runtime.stop.MultipleAndStoppingCondition","3wSA-MultipleStoppingCondition.ugt"))
		
// TODO: check these stay here - possibly add subnodes
hasNode parameterValuesSpec
	isOfClass = String("parameterValues")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("0..1")
	
hasNode initialStateSpec
	isOfClass = String("initialState")
	hasParent = StringTable(([1]"dynamics:"))
	multiplicity = IntegerRange("0..1")