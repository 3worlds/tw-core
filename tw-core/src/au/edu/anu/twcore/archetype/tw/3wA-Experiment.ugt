tree
hasNode experimentSpec
	isOfClass = String("experiment")
	hasParent =  StringTable(([1]"3worlds:"))
	multiplicity = IntegerRange("1..1")
	hasEdge baseLineSpec
		isOfClass = String("baseLine")
		toNode = String("system:")
		multiplicity = IntegerRange("0..1") // Used to find the associated simulatorNode. Not required if only one system:
	mustSatisfyQuery baselineQuery
		className = String("au.edu.anu.twcore.archetype.tw.BaselineQuery")

	hasProperty experimentDirPropSpec
		hasName = String("directory")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		mustSatisfyQuery baselineQuery2
			className = String("au.edu.anu.twcore.archetype.tw.HasValidFileNameChars")
		
	hasProperty experimentDescPropSpec
		hasName = String("precis")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		
	hasProperty experimentReplication
		hasName = String("nReplicates")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
		mustSatisfyQuery repsIsInRangeQuerySpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
			interval = IntTable(([2]1,2147483647))

hasNode designSpec
	isOfClass = String("design")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("1..1")
	hasProperty designTypePropertySpec
		hasName = String("type")
		type = String("ExperimentDesignType")
		multiplicity = IntegerRange("0..1")
	hasProperty designFilePropertySpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("0..1")
		mustSatisfyQuery dataSourceFileExistenceQuery2
			className = String("au.edu.anu.twcore.archetype.tw.InputFileExistQuery")
	mustSatisfyQuery dimIsInRangeQuerySpec
		className = String("au.edu.anu.twcore.archetype.tw.PropertyXorQuery")
		proplist = StringTable(([2]file,type))
	
	mustSatisfyQuery treatmentExistsQuery
		className = String("au.edu.anu.twcore.archetype.tw.TreatmentExistsQuery")


hasNode treatmentSpec
	isOfClass = String("treatment")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	hasEdge  fieldEdgeSpec
		isOfClass = String("treats")
		toNode = String("field:")
		multiplicity = IntegerRange("1..*")
		hasProperty edgeTreatmentRankSpec
			hasName = String("rank")
			type = String("Integer")
			multiplicity = IntegerRange("1..1")
		hasProperty edgeTreatmentValuesSpec
			hasName = String("values")
			type =  String("StringTable")
			multiplicity = IntegerRange("1..1")
		
		hasProperty edgeTreatmentValueNamesSpec
			hasName = String("valueNames")
			type =  String("StringTable")
			multiplicity = IntegerRange("1..1")
			
		mustSatisfyQuery TableDimsMustMatchQuery
			className = String("au.edu.anu.twcore.archetype.tw.TableDimsMustMatchQuery")
			tables = StringTable(([2]"values","valueNames"))

		mustSatisfyQuery TreatmentTableQuerySpec
			className = String("au.edu.anu.twcore.archetype.tw.TreatmentTableQuery")

	mustSatisfyQuery dimRanksAreDifferentQuery
		className = String("au.edu.anu.twcore.archetype.tw.RankingPropertyQuery")
		parameters = StringTable(([2]"treats","rank"))

//hasNode treatmentSpec
//	isOfClass = String("treatment")
//	hasParent =  StringTable(([1]"experiment:"))
//	multiplicity = IntegerRange("0..*")
//	hasProperty treatmentReplicatesPropertySpec
//		hasName = String("replicates")
//		type = String("Integer")
//		multiplicity = IntegerRange("1..1")
//	hasEdge modelSetupEdgeSpec
//		isOfClass = String("modelSetup")
//		toNode = String("system:")
//		multiplicity = IntegerRange("0..1")

hasNode modelChangeSpec
	isOfClass = String("modelChange")
	hasParent =  StringTable(([1]"treatment:"))
	multiplicity = IntegerRange("0..*")
	// this may be a flaw: how can you precisely specify a parameter with just a String ?
	hasProperty modelChangeParameterSpec
		hasName = String("parameter")
		type = String("String")
		multiplicity = IntegerRange("1..1")
	hasProperty modelChangeValueSpec
		hasName = String("replaceWith")
		type = String("DoubleTable")
		multiplicity = IntegerRange("1..1")

hasNode timePeriodSpec
	isOfClass = String("timePeriod")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*") // Ian- changed. Do we need this for a SingleRun type
	hasProperty timePeriodStartSpec
		hasName = String("start")
		type = String("DateTimeType")
		multiplicity = IntegerRange("0..1")
	hasProperty timePeriodEndSpec
		hasName = String("end")
		type = String("DateTimeType")
		multiplicity = IntegerRange("0..1")
	hasEdge timePeriodStopSpec
		isOfClass = String("stopOn")
		toNode = String("stoppingCondition:")
		multiplicity = IntegerRange("0..1")
	// TODO Needs a query to make end>start
	
//-------------------------------------------------------------------------------------------
// DATA SOURCE: Specification of a source of data to import to a model configuration
// Currently supported: spreadsheet-type data in .csv or .ods formats
//-------------------------------------------------------------------------------------------
hasNode dataSourceSpec
	isOfClass = String("dataSource")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	
	//
	// name of the file represented by this source - this file must exist.
	//
	hasProperty dataSourceFileSpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery dataSourceFileExistenceQuery
			className = String("au.edu.anu.twcore.archetype.tw.InputFileExistQuery")
			
	//
	// type of file - at the moment, .csv or .ods - with matching sub-archetypes
	//
	hasProperty dataSourceSubclassPropertySpec
		hasName = String("subclass")
		type = String("String")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			values = StringTable(([3]+
			"au.edu.anu.twcore.experiment.runtime.io.CsvFileLoader",+
			"au.edu.anu.twcore.experiment.runtime.io.OdfFileLoader",+
			"au.edu.anu.twcore.experiment.runtime.io.BOMWeatherLoader"))
	mustSatisfyQuery CheckSubArchetypeQueryCsvFile
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass",+
		"au.edu.anu.twcore.experiment.runtime.io.CsvFileLoader",+
		"3wSA-CsvFileLoader.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryOdfFile
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass",+
		"au.edu.anu.twcore.experiment.runtime.io.OdfFileLoader",+
		"3wSA-OdfFileLoader.ugt"))
		
	//
	// consistency checks that the file contains the variables listed in the properties below
	//
	mustSatisfyQuery dataSourceFileContentCheck
		className = String("au.edu.anu.twcore.archetype.tw.CheckFileContentQuery")
		
	//
	// list of column names to read (default: read all variables found in the file)
	//
	hasProperty CsvFileReadSpec
		hasName = String("read")
		type = String("StringTable")
		multiplicity = IntegerRange("0..1")
		
	//
	// name of the variable (spreadsheet column) containing a life cycle identifier (optional)
	//
	hasProperty CsvFileidSpeciesSpec
		hasName = String("idLifeCycle")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		
	//
	// name of the variable (spreadsheet column) containing a group identifier (optional)
	//
	hasProperty CsvFileidStageSpec
		hasName = String("idGroup")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	//
	// consistency check: if a component  is an instance of a group, then the data source must
	// specify a groupId column
	//
	// if a group is loaded, then the data file may need to contain a groupId column
//	mustSatisfyQuery dataSourceFileIdCheck
//		className = String("au.edu.anu.twcore.archetype.tw.CheckFileIdQuery")

	//
	// name of the variable (spreadsheet column) containing a component identifier (optional)
	//
	hasProperty CsvFileidComponentSpec
		hasName = String("idComponent")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	//
	// consistency check: if a component is loaded from >1 data sources, then all data
	// sources must have a component id column 
	//
	mustSatisfyQuery dataSourceFileComponentIdCheck
		className = String("au.edu.anu.twcore.archetype.tw.CheckMutipleFileIdQuery")
		
	//
	// name of the variable (spreadsheet column) containing a relation identifier (optional)
	// (NB: this is disabled at the moment)
	//
	hasProperty CsvFileidRelationSpec
		hasName = String("idRelation")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		
	//
	// I dont remember what was that for ??
	//
	hasProperty CsvFileidVariableSpec
		hasName = String("idVariable")
		type = String("String")
		multiplicity = IntegerRange("0..1")
		
	// names of the variables (spreadsheet columns) containing a dimension identifier
	// (for table data) - consistency rules apply
	//
	hasProperty CsvFileDimListSpec
		hasName = String("dim")
		type = String("StringTable")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery dataSourceFileDimCheck
		className = String("au.edu.anu.twcore.archetype.tw.CheckFileDimQuery")
//-------------------------------------------------------------------------------------------

hasNode dataSinkSpec
	isOfClass = String("dataSink")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dataSinkFileSpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("1..1")
	hasEdge dataSinkToDataTrackerEdgeSpec
		isOfClass = String("source")
		toNode = String("dataTracker:")
		multiplicity = IntegerRange("1..1")
	// TODO: more is needed to really implement this (ie file format...)

	// TODO: it might be better if the File property was in the sub-arch rather than the base class
	// Then i can determine a "Type" for the file and use the appropriate extensions - Ian