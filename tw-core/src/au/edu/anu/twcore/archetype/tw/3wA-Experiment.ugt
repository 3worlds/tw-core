tree
hasNode experimentSpec
	isOfClass = String("experiment")
	hasParent =  StringTable(([1]"3worlds:"))
	multiplicity = IntegerRange("1..1")
	hasEdge baseLineSpec
		isOfClass = String("baseLine")               
		toNode = String("system:")
		multiplicity = IntegerRange("0..1") // Used to find the associated simulatorNode. Not required if only one system:
	
hasNode designSpec
	isOfClass = String("design")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("1..1")
	hasProperty designTypePropertySpec
		hasName = String("type")
		type = String("ExperimentDesignType")
		multiplicity = IntegerRange("0..1")
	hasProperty designFilePropertySpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("0..1")
		mustSatisfyQuery dataSourceFileExistenceQuery2
			className = String("au.edu.anu.twcore.archetype.tw.InputFileExistQuery")
	mustSatisfyQuery dimIsInRangeQuerySpec
		className = String("au.edu.anu.twcore.archetype.tw.PropertyXorQuery")
		proplist = StringTable(([2]file,type))

hasNode treatmentSpec
	isOfClass = String("treatment")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	hasProperty treatmentReplicatesPropertySpec
		hasName = String("replicates")
		type = String("Integer")
		multiplicity = IntegerRange("1..1")
	hasEdge modelSetupEdgeSpec
		isOfClass = String("modelSetup")               
		toNode = String("system:")
		multiplicity = IntegerRange("0..1")

hasNode modelChangeSpec
	isOfClass = String("modelChange")
	hasParent =  StringTable(([1]"treatment:"))
	multiplicity = IntegerRange("0..*")
	// this may be a flaw: how can you precisely specify a parameter with just a String ?
	hasProperty modelChangeParameterSpec
		hasName = String("parameter")
		type = String("String")
		multiplicity = IntegerRange("1..1")
	hasProperty modelChangeValueSpec
		hasName = String("replaceWith")
		type = String("DoubleTable")
		multiplicity = IntegerRange("1..1")
		
hasNode timePeriodSpec
	isOfClass = String("timePeriod")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*") // Ian- changed. Do we need this for a SingleRun type
	hasProperty timePeriodStartSpec
		hasName = String("start")
		type = String("DateTimeType")
		multiplicity = IntegerRange("0..1")
	hasProperty timePeriodEndSpec
		hasName = String("end")
		type = String("DateTimeType")
		multiplicity = IntegerRange("0..1")
	hasEdge timePeriodStopSpec
		isOfClass = String("stopOn")               
		toNode = String("stoppingCondition:")
		multiplicity = IntegerRange("0..1")
	// TODO Needs a query to make end>start
hasNode dataSourceSpec
	isOfClass = String("dataSource")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dataSourceFileSpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery dataSourceFileExistenceQuery
			className = String("au.edu.anu.twcore.archetype.tw.InputFileExistQuery")
	hasProperty dataSourceSubclassPropertySpec
		hasName = String("subclass")
		type = String("String")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			values = StringTable(([3]+
			"au.edu.anu.twcore.experiment.runtime.io.CsvFileLoader",+
			"au.edu.anu.twcore.experiment.runtime.io.OdfFileLoader",+
			"au.edu.anu.twcore.experiment.runtime.io.BOMWeatherLoader"))
	mustSatisfyQuery CheckSubArchetypeQueryCsvFile
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass",+
		"au.edu.anu.twcore.experiment.runtime.io.CsvFileLoader",+
		"3wSA-CsvFileLoader.ugt"))
	mustSatisfyQuery CheckSubArchetypeQueryOdfFile
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"subclass",+
		"au.edu.anu.twcore.experiment.runtime.io.OdfFileLoader",+
		"3wSA-OdfFileLoader.ugt"))

hasNode dataSinkSpec
	isOfClass = String("dataSink")
	hasParent =  StringTable(([1]"experiment:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dataSinkFileSpec
		hasName = String("file")
		type = String("FileType")
		multiplicity = IntegerRange("1..1")
	hasEdge dataSinkToDataTrackerEdgeSpec
		isOfClass = String("source")
		toNode = String("dataTracker:")
		multiplicity = IntegerRange("1..1")
	// TODO: more is needed to really implement this (ie file format...)
	
	// TODO: it might be better if the File property was in the sub-arch rather than the base class
	// Then i can determine a "Type" for the file and use the appropriate extensions - Ian
	