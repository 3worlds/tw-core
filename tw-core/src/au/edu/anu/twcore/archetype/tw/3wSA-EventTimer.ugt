tree
// Sub-archetype for 3Worlds for checking EventTimer specifications
	scope =            String("3W-archetype")
	archetype =        String("au.edu.anu.rscs.aot.archetype.ArchetypeRootSpec")
	hasNode =          String("au.edu.anu.rscs.aot.archetype.NodeSpec")
	hasProperty =      String("au.edu.anu.rscs.aot.archetype.PropertySpec")
	hasEdge =          String("au.edu.anu.rscs.aot.archetype.EdgeSpec")
	mustSatisfyQuery = String("au.edu.anu.rscs.aot.archetype.ConstraintSpec")

archetype 3wSA-EventTimer

	hasNode EventTimeModelSpec
		isOfClass = String("timer")
		hasParent = StringTable(([1]"timeline:"))
		multiplicity = IntegerRange("0..*")

		hasEdge EventTimeerFedByEdgeSpec
			isOfClass = String("fedBy")
			toNode = String("function:")
			multiplicity = IntegerRange("0..*")
		// this to start an event timer with an event at t=0
		// I think this (1..1) is wrong. An event can be sent by another system driven by a clock timer
		hasEdge EventTimerFedByInitFunctionEdgeSpec
			isOfClass = String("fedBy")
			toNode = String("initFunction:")
			multiplicity = IntegerRange("0..1")
//		mustSatisfyQuery AtLeastOneFedByEdgeQuery
//			className = String("au.edu.anu.twcore.archetype.tw.OutNodeXorQuery")
//			nodeLabel1 = String("initFunction")
//			nodeLabel2 = String("function")

			//The index by which this queue is accessed by user code
			// So the function knows how to choose which queue to post to.
//			hasProperty fedByIndexrSpec
//				hasName = String("index")
//				type = String("Integer")
//				multiplicity = IntegerRange("1..1")
