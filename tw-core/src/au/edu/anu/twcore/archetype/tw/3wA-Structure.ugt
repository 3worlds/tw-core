tree
hasNode structureSpec
	isOfClass = String("structure")
	hasParent = StringTable(([1]"system:"))
	multiplicity = IntegerRange("1..1")
	
hasNode categorySetRootSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("1..*")

hasNode categorySetSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"category:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySpec
	isOfClass = String("category")
	hasParent = StringTable(([1]"categorySet:"))
	multiplicity = IntegerRange("1..*")
	// tricky bit - not easy to check that 0..3 of these edges do exist	
	hasEdge edgeToRecordSpec
		toNode = String("record:")
		multiplicity = IntegerRange("0..*")
		mustSatisfyQuery toDriverElementLabelQuery
			className = String("au.edu.anu.rscs.aot.queries.graph.element.ElementLabel")
			edgeLabel = StringTable(([3]"parameters","drivers","decorators"))
		mustSatisfyQuery driverNodeParentLabelQuery
			className = String("au.edu.anu.twcore.archetype.tw.NodeParentLabelQuery")
			parentLabel = String("dataDefinition")                
	mustSatisfyQuery parametersZeroOrOneEdgeQuery
		className = String("au.edu.anu.twcore.archetype.tw.ZeroOrOneEdgeQuery")
		edgeLabel = String("parameters")
	mustSatisfyQuery driversZeroOrOneEdgeQuery
		className = String("au.edu.anu.twcore.archetype.tw.ZeroOrOneEdgeQuery")
		edgeLabel = String("drivers")
	mustSatisfyQuery decoratorsZeroOrOneEdgeQuery
		className = String("au.edu.anu.twcore.archetype.tw.ZeroOrOneEdgeQuery")
		edgeLabel = String("decorators")
		
hasNode componentSpec
	isOfClass = String("component")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("1..*") 
	hasProperty componentLifeSpanPropertySpec
		hasName = String("lifeSpan")
		type = String("LifespanType")
		multiplicity = IntegerRange("1..1")
	hasEdge componentCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge componentInitialiserEdgeSpec
		isOfClass = String("initialisedBy")
		toNode = String("initialiser:")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery exclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	
//hasNode realisedComponentpec
//	isOfClass = String("realisedComponent")
//	hasParent = StringTable(([1]"component:"))
//	multiplicity = IntegerRange("1..1") //?

hasNode relationTypeSpec
	isOfClass = String("relationType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	// from / to edges

	