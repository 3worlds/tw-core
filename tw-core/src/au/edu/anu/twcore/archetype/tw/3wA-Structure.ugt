tree
hasNode structureSpec
	isOfClass = String("structure")
	hasParent = StringTable(([1]"system:"))
	multiplicity = IntegerRange("0..1") // NB
	hasProperty spaceFixedPointsSpec
		hasName = String("fixedPoints")
		// NB: this table must be of dimension 2
		type = String("DoubleTable")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery spaceFixedPointsPresentQuery
		className = String("au.edu.anu.twcore.archetype.tw.ConditionalMultiplicityQuery")
		args = StringTable(([2]"fixedPoints","space"))
		nMin = Integer(2)

hasNode categorySetRootSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySetSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"category:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySpec
	isOfClass = String("category")
	hasParent = StringTable(([1]"categorySet:"))
	multiplicity = IntegerRange("1..*")
	hasEdge edgeToAutoVarsSpec
		isOfClass = String("autoVar")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToDriversSpec
		isOfClass = String("drivers")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToDecoratorsSpec
		isOfClass = String("decorators")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToConstantsSpec
		isOfClass = String("constants")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")

//-------------------------------------------------------------------------------------------
// COMPONENT TYPE: defined by categories
// may have a GROUP TYPE as a parent, which will then define collective properties
// for all components of this group
//-------------------------------------------------------------------------------------------
hasNode componentTypeSpec
	isOfClass = String("componentType")
	hasParent = StringTable(([2]"structure:","groupType:"))
	multiplicity = IntegerRange("0..*")
	//
	// NB this property is not required at the moment
	//
	hasProperty componentMobilePropertySpec
		hasName = String("mobile")
		type = String("Boolean")
		multiplicity = IntegerRange("0..1")
	//
	// edges to the categories which define components of this type
	//
	hasEdge componentCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery exclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	//
	// hidden (because generated by 3w) properties that record the user-defined data classes
	// resulting from the category selection for this component type
	//
	hasProperty componentDecoratorSpec
		hasName = String("decoratorClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty componentDriverSpec
		hasName = String("driverClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty componentConstantSpec
		hasName = String("constantClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasEdge systemToComponentCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*component*")
		multiplicity = IntegerRange("1..1")
	//
	// required predefined categories in sets *organisation* and *lifespan*
	//
	mustSatisfyQuery hasOneCategoryOforganisationSpec
		className = String("au.edu.anu.twcore.archetype.tw.EdgeToOneChildOfQuery")
		reference = String(categorySet:*organisation*)
	mustSatisfyQuery hasOneCategoryOfLifeSpanSpec
		className = String("au.edu.anu.twcore.archetype.tw.EdgeToOneChildOfQuery")
		reference = String(categorySet:*lifespan*)
//-------------------------------------------------------------------------------------------

// initial state for an atomic component instance of a ComponentType
hasNode componentSpec
	isOfClass = String("component")
	hasParent = StringTable(([1]"componentType:"))
	multiplicity = IntegerRange("0..*")
	hasProperty numberOfInstancesSpec
		hasName = String("nInstances")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
	hasEdge componentToGroupSpec
		isOfClass = String("instanceOf")
		toNode = String("group:")
		multiplicity = IntegerRange("0..1") // optional - only requierd if groups are present
	hasEdge instanceOfToSourceLoadFromSpec
		isOfClass = String("loadFrom")
		toNode = String("dataSource:")
		multiplicity = IntegerRange("0..*")

//-------------------------------------------------------------------------------------------
// GROUP TYPE: defined by categories
// must have COMPONENT TYPE descendants, otherwise useless.
//-------------------------------------------------------------------------------------------
hasNode groupTypeSpec
	isOfClass = String("groupType")
	hasParent = StringTable(([2]"structure:","lifeCycleType:"))
	multiplicity = IntegerRange("0..*")
	//
	// required predefined categories - a group type must belong to all of these
	//
	hasEdge groupToSystemElementsCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*group*")
		multiplicity = IntegerRange("1..1")
	hasEdge groupToLifeSpanCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*permanent*")
		multiplicity = IntegerRange("1..1")
	hasEdge groupToOrganisationCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*assemblage*")
		multiplicity = IntegerRange("1..1")
	//
	// other (user-defined) categories
	//
	hasEdge groupCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery groupExclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	//
	// hidden (because generated by 3w) properties that record the user-defined data classes
	// resulting from the category selection for this group type
	//
	hasProperty groupDecoratorSpec
		hasName = String("decoratorClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty groupDriverSpec
		hasName = String("driverClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty groupConstantSpec
		hasName = String("constantClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
//-------------------------------------------------------------------------------------------

hasNode groupSpec
	isOfClass = String("group")
	hasParent = StringTable(([1]"groupType:"))
	multiplicity = IntegerRange("0..*")
	//
	// if the groupType is under a LifeCycleType, then the Group must refer to a matching LifeCycle
	//
	hasEdge groupToLifeCycleSpec
		isOfClass = String("cycle")
		toNode = String("lifeCycle:")
		multiplicity = IntegerRange("0..1")
	hasEdge groupToSourceLoadFromSpec
		isOfClass = String("loadFrom")
		toNode = String("dataSource:")
		multiplicity = IntegerRange("0..*")
	mustSatisfyQuery lifeCycleMustHaveSubGroupsOfProperCategories
		className = String("au.edu.anu.twcore.archetype.tw.LifeCycleSubGroupsQuery")
	mustSatisfyQuery groupRequiresCycleEdge
		className = String("au.edu.anu.twcore.archetype.tw.LifeCycleInstanceRequirementQuery")
	//
	// if there is no Component belonging to this group, then the Group must point to
	// a ComponentType in order to know in which container components of this group are to
	// be stored
	//
	hasEdge groupToComponentSpec
		isOfClass = String("groupOf")
		toNode = String("componentType:")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery groupRequiresGroupOfEdge
		className = String("au.edu.anu.twcore.archetype.tw.GroupComponentRequirementQuery")


//-------------------------------------------------------------------------------------------
// LIFE CYCLE TYPE: defined by categories
// must have GROUP TYPE descendants linked by RECRUIT or PRODUCE edges, otherwise useless
//-------------------------------------------------------------------------------------------
hasNode lifeCycleTypeSpec
	isOfClass = String("lifeCycleType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	//
	// required predefined categories - a life cycle type must belong to all of these
	//
	hasEdge lifeCycleToSystemElementsCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*life cycle*")
		multiplicity = IntegerRange("1..1")
	hasEdge lifeCycleToLifeSpanCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*permanent*")
		multiplicity = IntegerRange("1..1")
	hasEdge lifeCycleToOrganisationCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*assemblage*")
		multiplicity = IntegerRange("1..1")
	//
	// other (user-defined) categories
	//
	// TODO: check this category is not used by Systems, ie lifeCycle categories and system
	// categories should be completely separate
	hasEdge lifeCycleCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery lifeCycleExclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	//
	// hidden (because generated by 3w) properties that record the user-defined data classes
	// resulting from the category selection for this group type
	//
	hasProperty lifeCycleDecoratorSpec
		hasName = String("decoratorClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty lifeCycleDriverSpec
		hasName = String("driverClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty lifeCycleConstantSpec
		hasName = String("constantClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	//
	// all member categories of a life cycle must belong to the same category set (ie
	// all categories must be exclusive)
	//
	hasEdge lifeCycleToCategorySetSpec
		isOfClass = String("appliesTo")
		toNode = String("categorySet:")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery lifeCycleHasRecruitOrProduceChildQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		labels = StringTable(([2]"recruit","produce"))
//-------------------------------------------------------------------------------------------
// LIFE CYCLE TYPE: definition of recruitment transitions
// recruitment = when a SYSTEM COMPONENT changes categories while retaining its identity
//-------------------------------------------------------------------------------------------
hasNode recruitSpec
	isOfClass = String("recruit")
	hasParent = StringTable(([1]"lifeCycleType:"))
	multiplicity = IntegerRange("0..*")
	hasEdge recruitProcessSpec
		isOfClass = String("effectedBy")
		toNode = String("process:/function:")
//		toNode = String("function:")
		multiplicity = IntegerRange("1..1")
	hasEdge recruitToCategorySpec
		isOfClass = String("toCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..1")
	hasEdge recruitFromCategorySpec
		isOfClass = String("fromCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery recruitCategoryInLifeCycleSet
		className = String("au.edu.anu.twcore.archetype.tw.IsInLifeCycleCategorySetQuery")
	mustSatisfyQuery validRecruitFunction
		className = String("au.edu.anu.twcore.archetype.tw.ValidLifeCycleProcessQuery")
//-------------------------------------------------------------------------------------------
// LIFE CYCLE TYPE: definition of production transitions
// production = when a SYSTEM COMPONENT creates new components with a different category
// signature from the parent
//-------------------------------------------------------------------------------------------
hasNode produceSpec
	isOfClass = String("produce")
	hasParent = StringTable(([1]"lifeCycleType:"))
	multiplicity = IntegerRange("0..*")
	hasEdge productionProcessSpec
		isOfClass = String("effectedBy")
		toNode = String("process:/function:")
//		toNode = String("function:")
		multiplicity = IntegerRange("1..1")
	hasEdge produceToCategorySpec
		isOfClass = String("toCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..1")
	hasEdge produceFromCategorySpec
		isOfClass = String("fromCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery produceCategoryInLifeCycleSet
		className = String("au.edu.anu.twcore.archetype.tw.IsInLifeCycleCategorySetQuery")
	mustSatisfyQuery validProduceFunction
		className = String("au.edu.anu.twcore.archetype.tw.ValidLifeCycleProcessQuery")
		// TODO: constraint to add: 1..1 relation between produce and function within a LifeCycleType
//-------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------
// LIFE CYCLE: specifies instances of LIFE CYCLE TYPE to create at system initialisation
//-------------------------------------------------------------------------------------------
hasNode lifeCycleSpec
	isOfClass = String("lifeCycle")
	hasParent = StringTable(([1]"lifeCycleType:"))
	multiplicity = IntegerRange("0..*")
	hasEdge lifeCycleToSourceLoadFromSpec
		isOfClass = String("loadFrom")
		toNode = String("dataSource:")
		multiplicity = IntegerRange("0..*")
	mustSatisfyQuery lifeCycleRequiresAllGroups
		className = String("au.edu.anu.twcore.archetype.tw.GroupInstanceRequirementQuery")

// initialisation functions
hasNode initFunctionSpec
	isOfClass = String("initFunction")
	hasParent = StringTable(([2]"system:","componentType")) //also add lifecycle, group etc. later
	multiplicity = IntegerRange("0..1")
	mustSatisfyQuery initFunctionNameWithUppercaseQuery
		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")
	hasProperty initFunctionTypeSpec
		hasName = String("type")
		type = String("TwFunctionTypes")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery validInitFunctionTypeSpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			values = StringTable(([1]"SetInitialState"))
	hasProperty initUserFunctionSpec
		hasName = String("userClassName")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	// a function may have a node to a RNG. if none is required, default is used
	// if more than one is needed, then make two functions.
	hasEdge initfunctionRngSpec
		isOfClass = String("useRNG")
		toNode = String("rng:")
		multiplicity = IntegerRange("0..1")

hasNode relationTypeSpec
	isOfClass = String("relationType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	hasEdge toCategoryEdgeSpec
		isOfClass = String("toCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge fromCategoryEdgeSpec
		isOfClass = String("fromCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasProperty relationLifeSpanPropertySpec
		hasName = String("lifeSpan")
		type = String("LifespanType")
		multiplicity = IntegerRange("1..1")

hasNode spaceSpec
	isOfClass = String("space")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	// common properties
	hasProperty spaceTypeSpec
		hasName = String("type")
		type = String("SpaceType")
		multiplicity = IntegerRange("1..1")
	// Mapping of variables to coordinates
	hasEdge spaceCoordinateMapping
		isOfClass = String("coordinate")
		toNode = String("field:")
		multiplicity = IntegerRange("1..*")
		hasProperty coordinateRankSpec
			hasName = String("rank")
			type = String("Integer")
			multiplicity = IntegerRange("1..1")
	mustSatisfyQuery spaceCoordinateDimensionMatchQuery
		className = String("au.edu.anu.twcore.archetype.tw.SpaceDimensionConsistencyQuery")
	mustSatisfyQuery coordinatesInTheSameRecordQuery
		className = String("au.edu.anu.twcore.archetype.tw.EdgeToSiblingNodesQuery")
		edgeLabel = String("coordinate")
	mustSatisfyQuery coordinateRanksAreDifferentQuery
		className = String("au.edu.anu.twcore.archetype.tw.RankingPropertyQuery")
		parameters = StringTable(([2]"coordinate","rank"))
	mustSatisfyQuery spaceCoordinateNumberTypeQuery
		className = String("au.edu.anu.twcore.archetype.tw.SpaceCoordinateTypeQuery")
	mustSatisfyQuery spaceCoordinateFieldTypeQuery
		className = String("au.edu.anu.twcore.archetype.tw.SpaceRecordTypeQuery")

	// Edge effect correction / border type
//	hasProperty edgeEffectsSpec
//		hasName = String("edgeEffects")
//		type = String("EdgeEffectCorrection")
//		multiplicity = IntegerRange("1..1")
	hasProperty borderTypeSpec
		hasName = String("borderType")
		//type = String("StringTable") // of dimension 2 and ndim
		type = String("BorderListType") // n-dims is list length/2
		multiplicity = IntegerRange("1..1")//? maybe not?
	mustSatisfyQuery borderTypeValidityQuery
		className = String("au.edu.anu.twcore.archetype.tw.BorderTypeValidityQuery")
	// spatial grain (defines the smallest possible distance in that space)
	hasProperty spacePrecisionSpec
		hasName = String("precision")
		type = String("Double")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery nonNullPrecisionQuery
			className = String("au.edu.anu.twcore.archetype.tw.IsInIntervalQuery")
			interval = fr.ens.biologie.generic.utils.Interval(]0.0,+Inf[)
	hasProperty spaceUnitsSpec
		hasName = String("units")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	// guard areaor observation window
	hasProperty spaceGuardStripWidthSpec
		hasName = String("guardAreaWidth")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery guardAreaMaxWidthQuery
		className = String("au.edu.anu.twcore.archetype.tw.GuardAreaMaxWidthQuery")
	hasProperty spaceGuardAreaSpec
		hasName = String("observationWindow")
		type = String("Box")
		multiplicity = IntegerRange("0..1")
		// space bounding box (NB: replace with true limits in the future)
	mustSatisfyQuery boxDimensionQuery
		className = String("au.edu.anu.twcore.archetype.tw.BoxInSpaceDimensionQuery")
		boxProp = String("observationWindow")
	// random number generator for space
	hasEdge spaceRngSpec
		isOfClass = String("useRNG")
		toNode = String("rng:")
		multiplicity = IntegerRange("0..1")

	// specific properties for continuousFlatSurface
	// x limits of the plot
	hasProperty xLimitsSpec
		hasName = String("x-limits")
		type = String("Interval")
		multiplicity = IntegerRange("0..1")
		// the ymin and ymax of the rectangular area
	hasProperty yLimitsSpec
		hasName = String("y-limits")
		type = String("Interval")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery RequirePropertyQueryx-limits
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"x-limits","type","continuousFlatSurface"))
	mustSatisfyQuery RequirePropertyQueryy-limits
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"y-limits","type","continuousFlatSurface"))

	// specific properties for squareGrid
	// the cell size of the grid
	hasProperty cellSizeSpec
		hasName = String("cellSize")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	// the number of cells in x
	hasProperty xnCellsSpec
		hasName = String("x-nCells")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
	// can't have optional properties
	hasProperty ynCellsSpec
		hasName = String("y-nCells")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery RequirePropertyQuerycellSize
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"cellSize","type","squareGrid"))
	mustSatisfyQuery RequirePropertyQueryx-nCells
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"x-nCells","type","squareGrid"))
	mustSatisfyQuery RequirePropertyQueryy-nCells
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"y-nCells","type","squareGrid"))

// parameter values for a group as specified in groupSpec above
hasNode constantValuesSpec
	isOfClass = String("constantValues")
	hasParent = StringTable(([3]"system:","group:","component:"))
	multiplicity = IntegerRange("0..1")
	// then provide property (name,value) pairs - of course names must match category definitions
	// caution: if parameter values are associated to an atomic, it means it is unique in its
	// category, its parameters are specific to it and no other atomic with the same values
	// will ever exist. Shared parameter values must be set at the group level
	mustSatisfyQuery constantValuesPropertiesMatchDefinitionQuery
		className = String("au.edu.anu.twcore.archetype.tw.PropertiesMatchDefinitionQuery")
		values = StringTable(([1]constants))

hasNode variableValuesSpec
	isOfClass = String("variableValues")
	hasParent = StringTable(([2]"system:","component:"))
	multiplicity = IntegerRange("0..1")
	// then provide property (name,value) pairs - of course names must match category definitions
	mustSatisfyQuery variableValuesPropertiesMatchDefinitionQuery
		className = String("au.edu.anu.twcore.archetype.tw.PropertiesMatchDefinitionQuery")
		values = StringTable(([1]"drivers"))

