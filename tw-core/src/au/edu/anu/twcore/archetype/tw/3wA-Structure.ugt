tree
hasNode structureSpec
	isOfClass = String("structure")
	hasParent = StringTable(([1]"system:"))
	multiplicity = IntegerRange("1..1")
	
hasNode categorySetRootSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("1..*")

hasNode categorySetSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"category:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySpec
	isOfClass = String("category")
	hasParent = StringTable(([1]"categorySet:"))
	multiplicity = IntegerRange("1..*")
	hasEdge edgeToDriversSpec
		isOfClass = String("drivers")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToDecoratorsSpec
		isOfClass = String("decorators")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToParametersSpec
		isOfClass = String("parameters")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
		
hasNode componentTypeSpec
	isOfClass = String("componentType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("1..*") 
	hasProperty componentLifeSpanPropertySpec
		hasName = String("lifeSpan")
		type = String("LifespanType")
		multiplicity = IntegerRange("1..1")
	hasProperty componentMobilePropertySpec
		hasName = String("mobile")
		type = String("Boolean")
		multiplicity = IntegerRange("0..1")
	hasEdge componentCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge componentInitialiserEdgeSpec
		isOfClass = String("initialisedBy")
		toNode = String("initialiser:")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery exclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	hasProperty componentParameterSpec
		hasName = String("parameterClass")
		type =  String("String") 
		multiplicity = IntegerRange("0..1") 
	hasProperty componentDecoratorSpec
		hasName = String("decoratorClass")
		type =  String("String") 
		multiplicity = IntegerRange("0..1") 
	hasProperty componentDriverSpec
		hasName = String("driverClass")
		type =  String("String") 
		multiplicity = IntegerRange("0..1") 
	hasProperty autoRelocateFunctionSpec
		hasName = String("relocateFunctionName")
		type = String("StringTable")
		multiplicity = IntegerRange("0..1")

hasNode relationTypeSpec
	isOfClass = String("relationType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	hasEdge toCategoryEdgeSpec
		isOfClass = String("toCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge fromCategoryEdgeSpec
		isOfClass = String("fromCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
		
hasNode arenaSpec
	isOfClass = String("arena")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..1")

hasNode spaceSpec
	isOfClass = String("space")
	hasParent = StringTable(([1]"arena:"))
	multiplicity = IntegerRange("1..*")
	hasProperty spaceTypeSpec
		hasName = String("type")
		type = String("SpaceType")
		multiplicity = IntegerRange("1..1")
	hasProperty edgeEffectsSpec
		hasName = String("edgeEffects")
		type = String("EdgeEffects")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery CheckSubArchetypeQuerySpaceType1
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"type","continuousFlatSurface","3wSA-continuousFlatSurface.ugt"))
	mustSatisfyQuery CheckSubArchetypeQuerySpaceType2
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([3]"type","squareGrid","3wSA-squareGrid.ugt"))
	hasProperty spacePrecisionSpec
		hasName = String("precision")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty spaceUnitsSpec
		hasName = String("units")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	hasEdge spaceRngSpec
		isOfClass = String("useRNG")
		toNode = String("rng:")
		multiplicity = IntegerRange("0..1")
	

