tree
hasNode structureSpec
	isOfClass = String("structure")
	hasParent = StringTable(([1]"system:"))
	multiplicity = IntegerRange("0..1") // tmp change: can we modify the code to allow this. Not needed for the logistic1 tut

hasNode categorySetRootSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySetSpec
	isOfClass = String("categorySet")
	hasParent = StringTable(([1]"category:"))
	multiplicity = IntegerRange("0..*")

hasNode categorySpec
	isOfClass = String("category")
	hasParent = StringTable(([1]"categorySet:"))
	multiplicity = IntegerRange("1..*")
	hasEdge edgeToAutoVarsSpec
		isOfClass = String("autoVar")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToDriversSpec
		isOfClass = String("drivers")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToDecoratorsSpec
		isOfClass = String("decorators")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToLifetimeConstantsSpec
		isOfClass = String("lifetimeConstants")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")
	hasEdge edgeToParametersSpec
		isOfClass = String("parameters")
		toNode = String("record:")
		multiplicity = IntegerRange("0..1")

hasNode componentTypeSpec
	isOfClass = String("componentType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	hasProperty componentLifeSpanPropertySpec
		hasName = String("lifeSpan")
		type = String("LifespanType")
		multiplicity = IntegerRange("1..1")
	hasProperty componentMobilePropertySpec
		hasName = String("mobile")
		type = String("Boolean")
		multiplicity = IntegerRange("0..1")
	hasEdge componentCategoryBelongsToSpec
		isOfClass = String("belongsTo")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge componentInitialiserEdgeSpec
		isOfClass = String("initialisedBy")
		toNode = String("initialiser:")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery exclusiveCategoryCheckSpec
		className = String("au.edu.anu.twcore.archetype.tw.ExclusiveCategoryQuery")
	hasProperty componentParameterSpec
		hasName = String("parameterClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty componentDecoratorSpec
		hasName = String("decoratorClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty componentDriverSpec
		hasName = String("driverClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty componentLifeTimeConstantSpec
		hasName = String("constantClass")
		type =  String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty autoRelocateFunctionSpec
		hasName = String("relocateFunctionName")
		type = String("StringTable")
		multiplicity = IntegerRange("0..1")
	hasEdge systemToComponentCategorySpec
		isOfClass = String("belongsTo")
		toNode = String("category:*component*")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery hasOneCategoryOforganisationSpec
		className = String("au.edu.anu.twcore.archetype.tw.EdgeToOneChildOfQuery")
		reference = String(categorySet:*organisation*)
	mustSatisfyQuery hasOneCategoryOfLifeSpanSpec
		className = String("au.edu.anu.twcore.archetype.tw.EdgeToOneChildOfQuery")
		reference = String(categorySet:*lifespan*)

// initial state for an atomic component instance of a ComponentType
hasNode componentSpec
	isOfClass = String("component")
	hasParent = StringTable(([2]"componentType:","group:"))
	multiplicity = IntegerRange("0..*")
	hasEdge componentToSystemSpec
		isOfClass = String("instanceOf")
		toNode = String("componentType:")
		multiplicity = IntegerRange("0..1") // optional - only requierd if groups are present
	hasEdge componentToSpaceSpec
		isOfClass = String("location")
		toNode = String("space:")
		multiplicity = IntegerRange("0..1")
		hasProperty spaceComponentCoordinatesSpec
			hasName = String("coordinates")
			type = String("DoubleTable")
			multiplicity = IntegerRange("1..1")
	hasEdge instanceOfToSourceLoadFromSpec
		isOfClass = String("loadFrom")
		toNode = String("dataSource:")
		multiplicity = IntegerRange("0..*")

// initialisation functions
hasNode initFunctionSpec
	isOfClass = String("initFunction")
	hasParent = StringTable(([2]"system:","componentType")) //also add lifecycle, group etc. later
	multiplicity = IntegerRange("0..1")
	mustSatisfyQuery initFunctionNameWithUppercaseQuery
		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")
	hasProperty initFunctionTypeSpec
		hasName = String("type")
		type = String("TwFunctionTypes")
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery validInitFunctionTypeSpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInValueSetQuery")
			values = StringTable(([1]"SetInitialState"))
	hasProperty initUserFunctionSpec
		hasName = String("userClassName")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	// a function may have a node to a RNG. if none is required, default is used
	// if more than one is needed, then make two functions.
	hasEdge initfunctionRngSpec
		isOfClass = String("useRNG")
		toNode = String("rng:")
		multiplicity = IntegerRange("0..1")


hasNode relationTypeSpec
	isOfClass = String("relationType")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..*")
	hasEdge toCategoryEdgeSpec
		isOfClass = String("toCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasEdge fromCategoryEdgeSpec
		isOfClass = String("fromCategory")
		toNode = String("category:")
		multiplicity = IntegerRange("1..*")
	hasProperty relationLifeSpanPropertySpec
		hasName = String("lifeSpan")
		type = String("LifespanType")
		multiplicity = IntegerRange("1..1")

hasNode arenaSpec
	isOfClass = String("arena")
	hasParent = StringTable(([1]"structure:"))
	multiplicity = IntegerRange("0..1")

hasNode spaceSpec
	isOfClass = String("space")
	hasParent = StringTable(([1]"arena:"))
	multiplicity = IntegerRange("1..*")
	// common properties
	hasProperty spaceTypeSpec
		hasName = String("type")
		type = String("SpaceType")
		multiplicity = IntegerRange("1..1")
	hasProperty edgeEffectsSpec
		hasName = String("edgeEffects")
		type = String("EdgeEffects")
		multiplicity = IntegerRange("1..1")
	hasProperty spacePrecisionSpec
		hasName = String("precision")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty spaceUnitsSpec
		hasName = String("units")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	hasEdge spaceRngSpec
		isOfClass = String("useRNG")
		toNode = String("rng:")
		multiplicity = IntegerRange("0..1")

	// specific properties for continuousFlatSurface
	// x limits of the plot
	hasProperty xLimitsSpec
		hasName = String("x-limits")
		type = String("Interval")
		multiplicity = IntegerRange("0..1")
		// the ymin and ymax of the rectangular area
	hasProperty yLimitsSpec
		hasName = String("y-limits")
		type = String("Interval")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery RequirePropertyQueryx-limits
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"x-limits","type","continuousFlatSurface"))
	mustSatisfyQuery RequirePropertyQueryy-limits
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"y-limits","type","continuousFlatSurface"))

	// specific properties for squareGrid
	// the cell size of the grid
	hasProperty cellSizeSpec
		hasName = String("cellSize")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	// the number of cells in x
	hasProperty xnCellsSpec
		hasName = String("x-nCells")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
	// can't have optional properties
	hasProperty ynCellsSpec
		hasName = String("y-nCells")
		type = String("Integer")
		multiplicity = IntegerRange("0..1")
	mustSatisfyQuery RequirePropertyQuerycellSize
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"cellSize","type","squareGrid"))
	mustSatisfyQuery RequirePropertyQueryx-nCells
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"x-nCells","type","squareGrid"))
	mustSatisfyQuery RequirePropertyQueryy-nCells
		className = String("au.edu.anu.twcore.archetype.tw.RequirePropertyQuery")
		conditions = StringTable(([3]"y-nCells","type","squareGrid"))

// parameter values for a group as specified in groupSpec above
hasNode constantValuesSpec
	isOfClass = String("constantValues")
	hasParent = StringTable(([3]"system:","group:","component:"))
	multiplicity = IntegerRange("0..1")
	// then provide property (name,value) pairs - of course names must match category definitions
	// caution: if parameter values are associated to an atomic, it means it is unique in its
	// category, its parameters are specific to it and no other atomic with the same values
	// will ever exist. Shared parameter values must be set at the group level
	mustSatisfyQuery constantValuesPropertiesMatchDefinitionQuery
		className = String("au.edu.anu.twcore.archetype.tw.PropertiesMatchDefinitionQuery")
		values = StringTable(([1]lifetimeConstants))

hasNode variableValuesSpec
	isOfClass = String("variableValues")
	hasParent = StringTable(([2]"system:","component:"))
	multiplicity = IntegerRange("0..1")
	// then provide property (name,value) pairs - of course names must match category definitions
	mustSatisfyQuery variableValuesPropertiesMatchDefinitionQuery
		className = String("au.edu.anu.twcore.archetype.tw.PropertiesMatchDefinitionQuery")
		values = StringTable(([1]"drivers"))

