tree
	scope =            String("3W-archetype")
	archetype =        String("au.edu.anu.aot.archetype.ArchetypeRootSpec")
	hasNode =          String("au.edu.anu.aot.archetype.NodeSpec")
	hasProperty =      String("au.edu.anu.aot.archetype.PropertySpec")
	hasEdge =          String("au.edu.anu.aot.archetype.EdgeSpec")
	mustSatisfyQuery = String("au.edu.anu.aot.archetype.ConstraintSpec")

archetype 3wSA-HLTimeSeriesAnalysisWidget1

	hasNode HLTimeSeriesAnalysisWidget1Spec
		isOfClass = String("widget")
		hasParent = StringTable(([1]"headless:"))
		multiplicity = IntegerRange("0..*")
		mustSatisfyQuery SenderInRangeQuery
			className = String("au.edu.anu.twcore.archetype.tw.SenderInRangeQuery")
		
		hasEdge HLTimeSeriesAnalysisWidget1DataTrackerEdgeSpec
			isOfClass = String("trackSeries")
			toNode = String("dataTracker:")
			multiplicity = IntegerRange("1..1")
		
		hasProperty HLTimeSeriesAnalysisWidget1nLinesProperty
			hasName = String("nLines")
			type = String("Integer")
			multiplicity = IntegerRange("0..1")
			mustSatisfyQuery HLExperimentWidget1nLinesPropertyInRangeQuery1
				className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
				interval = IntTable(([2]1,2147483647))
						
		hasProperty HLTimeSeriesAnalysisWidget1nisZeroMinMeansPlotProperty
			hasName = String("isZeroMinMeansPlot")
			type = String("Boolean")
			multiplicity = IntegerRange("0..1")
			
		mustSatisfyQuery HLTimeSeriesAnalysisWidget1ParentClassQuery
			className = String("au.edu.anu.twcore.archetype.tw.ParentLabelQuery")
			parentLabels = StringTable(([1]"headless"))
			
		// needs either a query to ensure only ONE response variable
		// or modify widget to handle any number - preferred but tricky
		// NOTE the kludge in WidgetNode Line 116 during creation. 
		// Needs looking at.
			
			