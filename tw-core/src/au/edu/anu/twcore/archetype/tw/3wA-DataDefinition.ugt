tree 
hasNode dataDefinitionSpec
	isOfClass = String("dataDefinition")
	hasParent = StringTable(([1]"3worlds:"))
	multiplicity = IntegerRange("1..1")
	
hasNode  dimSpec
	isOfClass = String("dimensioner")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dimNameSpec
		hasName = String("size")
		type = String("Integer") 
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery dimIsInRangeQuerySpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
			interval = IntTable(("[2]1,2147483647"))
				
hasNode recordRootSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
//	hasProperty recordNameSpec
//		hasName = String("name")
//		type = String("String")
//		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery recordRootNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))

hasNode recordTableSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"table:"))
	multiplicity = IntegerRange("0..1")
//	hasProperty recordNameSpec
//		hasName = String("name")
//		type = String("String")
//		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery recordNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))
		
		
hasNode tableSpec
	isOfClass = String("table")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
//	hasProperty tableNameSpec 
//		hasName = String("name")
//		multiplicity = IntegerRange("1..1")
//		type = String("String")
	hasProperty dataElementTypeSpec
		hasName = String("dataElementType")
		type = String("String")				
		multiplicity = IntegerRange("0..1")
	hasEdge dimEdgeSpec
		isOfClass = String("sizedBy")               //??
		toNode = String("dimensioner")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery childXorPropertyQuerySpec
		className = String("au.edu.anu.twcore.archetype.tw.ChildXorPropertyQuery")
		edge_prop = StringTable(([2]"record","dataElementType"))

		
hasNode recordFieldSpec
	isOfClass = String("field")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
	hasProperty recordFieldNamePropertySpec
		hasName = String("type")
		type  = String("String")
		multiplicity = IntegerRange("1..1")
	// this property is completely redundant with the above
	// normally type should be any String recognized by
	// the ValidPropertyTypes class in omugi fr.cnrs.iees.io.parsing	
	// This class is able to work out java class names from simple
	// type names. Additional types can be added in there if needed
	// (eg a file name type or things like that)
//	hasProperty recordDataElementTypePropertySpec
//		hasName = String("dataElementType")
//		type = String("DataElementType")
//		multiplicity = IntegerRange("1..1")
