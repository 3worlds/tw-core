tree 
hasNode dataDefinitionSpec
	isOfClass = String("dataDefinition")
	hasParent = StringTable(([1]"3worlds:"))
	multiplicity = IntegerRange("1..1")
	
hasNode  dimSpec
	isOfClass = String("dimensioner")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dimNameSpec
		hasName = String("size")
		type = String("Integer") 
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery dimIsInRangeQuerySpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
			interval = IntTable(("[2]1,2147483647"))
	hasProperty dimRankSpec
		hasName = String("rank")
		type = String("Integer")
		multiplicity = IntegerRange("1..1")
		// why should this optional????
				
hasNode recordRootSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
	mustSatisfyQuery recordRootNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))
//	mustSatisfyQuery  recordRootNodeNameWithUppercaseQuery
//		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")

hasNode recordTableSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"table:"))
	multiplicity = IntegerRange("0..1")
	mustSatisfyQuery recordNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))
//	mustSatisfyQuery  recordOfTableNameWithUppercaseQuery
//		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")
		
		
hasNode tableSpec
	isOfClass = String("table")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dataElementTypeSpec
		hasName = String("dataElementType")
		type = String("DataElementType")
		multiplicity = IntegerRange("0..1")
	hasEdge dimEdgeSpec
		isOfClass = String("sizedBy")            
		toNode = String("dimensioner:")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery childXorPropertyQuerySpec
		className = String("au.edu.anu.twcore.archetype.tw.ChildXorPropertyQuery")
		edge_prop = StringTable(([2]"record","dataElementType"))
	mustSatisfyQuery DoubleMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-RealTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Double)
	mustSatisfyQuery FloatMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-RealTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Float)
	mustSatisfyQuery IntegerMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-IntegerTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
	mustSatisfyQuery LongMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-IntegerTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Long)
	mustSatisfyQuery ShortMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-IntegerTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Short)
	mustSatisfyQuery ByteMetadataTableTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"dataElementType","3wSA-IntegerTableMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Byte)
		
		
		
	// optional metadata - TODO: make sure these are only applied to numeric tables
	// cf what has been done for fields below
//	hasProperty NumericTableUnitsSpec
//		hasName = String("units")
//		type = String("String")
//		multiplicity = IntegerRange("0..1")
//	hasProperty NumericTablePrecSpec
//		hasName = String("precision")
//		type = String("Double")
//		multiplicity = IntegerRange("0..1")
//	hasProperty NumericTableMinSpec
//		hasName = String("min")
//		type = String("Double")
//		multiplicity = IntegerRange("0..1")
//	hasProperty NumericTableMaxSpec
//		hasName = String("max")
//		type = String("Double")
//		multiplicity = IntegerRange("0..1")
		
hasNode recordFieldSpec
	isOfClass = String("field")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
	hasProperty recordFieldNamePropertySpec
		hasName = String("type")
		type = String("DataElementType")
		multiplicity = IntegerRange("1..1")
	mustSatisfyQuery DoubleMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-RealFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Double)
	mustSatisfyQuery FloatMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-RealFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Float)
	mustSatisfyQuery IntegerMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-IntegerFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Integer)
	mustSatisfyQuery LongMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-IntegerFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Long)
	mustSatisfyQuery ShortMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-IntegerFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Short)
	mustSatisfyQuery ByteMetadataTypeSpec
		className = String("au.edu.anu.twcore.archetype.tw.CheckSubArchetypeQuery")
		parameters = StringTable(([2]"type","3wSA-IntegerFieldMetadata.ugt"))
		value = fr.cnrs.iees.twcore.constants.DataElementType(Byte)
