tree 
hasNode dataDefinitionSpec
	isOfClass = String("dataDefinition")
	hasParent = StringTable(([1]"3worlds:"))
	multiplicity = IntegerRange("1..1")
	
hasNode  dimSpec
	isOfClass = String("dimensioner")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dimNameSpec
		hasName = String("size")
		type = String("Integer") 
		multiplicity = IntegerRange("1..1")
		mustSatisfyQuery dimIsInRangeQuerySpec
			className = String("au.edu.anu.twcore.archetype.tw.IsInRangeQuery")
			interval = IntTable(("[2]1,2147483647"))
				
hasNode recordRootSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"dataDefinition:"))
	multiplicity = IntegerRange("0..*")
	mustSatisfyQuery recordRootNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))
	mustSatisfyQuery  recordRootNodeNameWithUppercaseQuery
		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")

hasNode recordTableSpec
	isOfClass = String("record")
	hasParent = StringTable(([1]"table:"))
	multiplicity = IntegerRange("0..1")
	mustSatisfyQuery recordNodeAtLeastOneChildLabelOfQuery
		className = String("au.edu.anu.twcore.archetype.tw.NodeAtLeastOneChildLabelOfQuery")
		childLabel = StringTable(([2]"field", "table"))
	mustSatisfyQuery  recordOfTableNameWithUppercaseQuery
		className = String("au.edu.anu.twcore.archetype.tw.NameStartsWithUpperCaseQuery")
		
		
hasNode tableSpec
	isOfClass = String("table")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
	hasProperty dataElementTypeSpec
		hasName = String("dataElementType")
		type = String("DataElementType")
		multiplicity = IntegerRange("0..1")
	hasEdge dimEdgeSpec
		isOfClass = String("sizedBy")            
		toNode = String("dimensioner:")
		multiplicity = IntegerRange("1..*")
	mustSatisfyQuery childXorPropertyQuerySpec
		className = String("au.edu.anu.twcore.archetype.tw.ChildXorPropertyQuery")
		edge_prop = StringTable(([2]"record","dataElementType"))
	// optional metadata - TODO: make sure these are only applied to numeric tables
	hasProperty NumericTableUnitsSpec
		hasName = String("units")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericTablePrecSpec
		hasName = String("precision")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericTableMinSpec
		hasName = String("min")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericTableMaxSpec
		hasName = String("max")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
		
hasNode recordFieldSpec
	isOfClass = String("field")
	hasParent = StringTable(([1]"record:"))
	multiplicity = IntegerRange("0..*")
	hasProperty recordFieldNamePropertySpec
		hasName = String("type")
		type = String("DataElementType")
		multiplicity = IntegerRange("1..1")
	// optional metadata - TODO: make sure these are only applied to numeric fields
	hasProperty NumericFieldUnitsSpec
		hasName = String("units")
		type = String("String")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericFieldPrecSpec
		hasName = String("precision")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericFieldMinSpec
		hasName = String("min")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
	hasProperty NumericFieldMaxSpec
		hasName = String("max")
		type = String("Double")
		multiplicity = IntegerRange("0..1")
		