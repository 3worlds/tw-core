/**************************************************************************
 *  TW-CORE - 3Worlds Core classes and methods                            *
 *                                                                        *
 *  Copyright 2018: Shayne Flint, Jacques Gignoux & Ian D. Davies         *
 *       shayne.flint@anu.edu.au                                          * 
 *       jacques.gignoux@upmc.fr                                          *
 *       ian.davies@anu.edu.au                                            * 
 *                                                                        *
 *  TW-CORE is a library of the principle components required by 3W       *
 *                                                                        *
 **************************************************************************                                       
 *  This file is part of TW-CORE (3Worlds Core).                          *
 *                                                                        *
 *  TW-CORE is free software: you can redistribute it and/or modify       *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation, either version 3 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 *  TW-CORE is distributed in the hope that it will be useful,            *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *  GNU General Public License for more details.                          *                         
 *                                                                        *
 *  You should have received a copy of the GNU General Public License     *
 *  along with TW-CORE.                                                   *
 *  If not, see <https://www.gnu.org/licenses/gpl.html>                   *
 *                                                                        *
 **************************************************************************/

package au.edu.anu.twcore.rngFactory;

import java.security.SecureRandom;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.logging.Logger;

import au.edu.anu.omhtk.rng.Pcg32;
import au.edu.anu.omhtk.rng.RandomSeeds;
import au.edu.anu.omhtk.rng.XSRandom;
import au.edu.anu.twcore.exceptions.TwcoreException;
import fr.cnrs.iees.twcore.constants.RngAlgType;
import fr.cnrs.iees.twcore.constants.RngResetType;
import fr.cnrs.iees.twcore.constants.RngSeedSourceType;
import fr.ens.biologie.generic.utils.Logging;


/**
 * Author Ian Davies
 *
 * Date Dec 5, 2018
 */
/**
 * <p>
 * Simple random number stream factory that manages resetting seeds in various
 * ways.
 * </p>
 * 
 * <p>
 * Usage: Model developers create a stream as:
 * </p>
 * {@code RandomFactory.makeRandom("test1", 0, ResetType.ONRUNSTART, SeedSource.SECURE, new [Pcg32()||XSRandom()||Random()]);}<br/>
 * <p>
 * Then use it as:
 * </p>
 * 
 * {@code Random rns = RandomFactory.getRandom("test1");}<br/>
 * 
 * {@code rns.nextDouble();} etc
 * </p>
 * 
 * <p>
 * This system contains a table of 1000 random numbers that have been generated
 * from atmospheric noise. This can be used as seeds by the given index if SeedSource.TABLE is used.
 * Alternatively, seeds can also be generated by SecureRandom algorithm.
 * </p>
 * 
 * 
 */
public class RngFactory {

	private static Random seedGenerator = new SecureRandom();
	private static Logger log = Logging.getLogger(RngFactory.class);


	private final static class Generator {
		RngResetType resetType;
		long seed;
		Random rng;

		private Generator(long seed, RngResetType resetType, Random rng) {
			this.rng = rng;
			this.resetType = resetType;
			this.seed = seed;
			reset();
			log.info("Created random number stream" + toString());
		}

		private void reset() {
			rng.setSeed(seed);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("[class: ");
			sb.append(rng.getClass().getSimpleName());
			sb.append("; Seed: ");
			sb.append(seed);
			sb.append("; Reset: ");
			sb.append(resetType.name());
			sb.append("]");
			return sb.toString();

		}
	}

	private static Map<String, Generator> rngs = new HashMap<>();

	/**
	 * 
	 * There are 3 random number generators available. Note that SecureRandom cannot
	 * be used as it has no means of resetting the seed; a feature this factory
	 * relies upon. The currently available generators are:
	 * <ol>
	 * <li>Java.util.Random - medium speed, poor quality;</li>
	 * 
	 * <li>au.edu.anu.fses.rng.XSRandom - very fast (76% faster than
	 * Java.util.Random), medium quality</li>
	 * 
	 * <li>au.edu.anu.fses.rng.Pcg32 - fast (56% faster than Java.util.Random) and
	 * good quality</li>
	 * </ol>
	 * 
	 * The choice is really between 3 (faster) & 4 (better quality).
	 * 
	 * @param name      unique name
	 * @param seedIndex index into array[0..999] of naturally generated random
	 *                  numbers to act as seeds for resetting.
	 * @param resetType type of reset method (NEVER, ONRUNSTART, ONEXPERIMENTSTART)
	 * 
	 * @param source    Method of creating the random number seed (TABLE, SECURE,
	 *                  ZERO)
	 * @param rns       random number generator.
	 */
	public static void makeRandom(String name, int seedIndex, RngResetType resetType, RngSeedSourceType source, RngAlgType algType) {
			Random rns = null;
		switch (algType) {
		case Pcg32: {
			rns = new Pcg32();
			break;
		}
		case XSRandom: {
			rns = new XSRandom();
			break;
		}
		default:
			rns = new Random();
		}

		if (rns instanceof SecureRandom)
			throw new TwcoreException("SecureRandom algorithm is not supported.");
		if (source.equals(RngSeedSourceType.table))
			if (seedIndex < 0 || seedIndex >= RandomSeeds.nSeeds())
				throw new TwcoreException(
						"SeedIndex is out of range [0.." + (RandomSeeds.nSeeds() - 1) + "] found: " + seedIndex);
		if (rngs.containsKey(name))
			throw new TwcoreException("Attempt to create duplicate random number generetor [" + name + "]");
		long seed;
		if (source.equals(RngSeedSourceType.table))
			seed = RandomSeeds.getSeed(seedIndex);
		else if (source.equals(RngSeedSourceType.secure))
			seed = seedGenerator.nextLong();
		else if (rns instanceof XSRandom)
			seed = 1L; // NB Cannot be set to zero!
		else
			seed = 0L;
		log.info("Creating random stream [" + name + "; Seed: " + seed);
		Generator rng = new Generator(seed, resetType, rns);
		rngs.put(name, rng);
	}

	public static Random getRandom(String name) {
		try {
			return rngs.get(name).rng;
		} catch (NullPointerException e) {
			throw new TwcoreException("Random number stream not found: " + name);
		}
	}

	public static void resetRun() {
		reset(RngResetType.onRunStart);
	}

	public static void resetExperiment() {
		reset(RngResetType.onExperimentStart);
	}

	/**
	 * A little check method to call before calling makeRandom(...) or
	 * getRandom(...)
	 * 
	 * @param key
	 * @return
	 */
	public static boolean exists(String key) {
		return rngs.containsKey(key);
	}

	private static void reset(RngResetType type) {
		rngs.entrySet().forEach(entry -> {
			Generator rng = entry.getValue();
			if (rng.resetType.equals(type))
				rng.reset();
		});
	}

}
